1.  Java Ladder: Given that integer.parseInt() throws NumberFormalException
    A: "exc" followed by an in uncaught exceptipon
2.  Sorting in Ruby, "orange, apple, banana...
    A: ["pear", "orange", "grapes", "banan", "apple"]
3.  What is resul tof the following command? Priorities { toDo.offer("") }
    A: 4 bills bills bills dishes laundry
4.  Which of the folliwng code snippets will NOT store a sorted array in my_array? [3,4.8,7...
    A: my_array.sort
5.  DFS in a graph, adjacency matrix
    A: O(n^2), O(e+n)
6.  Architectural Constants of REST
    A:  Unfirom inheritance,
    A: statelss,
    A: Cacheable,
    A: Layerred System
7.  Good URI Design
    A: URIs shold never be changed
    A: URIs should be short in length
    A: HTTP verbs should be used instaed of operation names in URIs
    A: Redirection must be used if a change in URI is requried
8.  Shortest Job First, m[1], m[2],...
    A: Deadlock
9.  REST Server Response
    A: XML
    A: JSON
    A: CSV
10  Restrictions of RESTful Web Services
    A: There should be separate concerns for each...
    A: The client-servicer communciation should be stateless
    A: In client-server,, the HTTP response should be cacheable
    A: Client-server communication should be done on a layerred system..
11. Time Complexity of an Insertion, linkedlist known pointer
    A: O(1)
12: Postorder Tree Traversal, how many binary trees with a 3 nodes have a postoder traversal of A B C
    A: 5
13: Nodes in a Binary Tree: how many leaf nodes does full binary tree has?
    A: n + 1 or L = K + 1(The number of leaf nodes is always one more than the number of internal nodes)
14: Arrays in java
    A: Arrays in java are essentially objects
15: Time complexity of searching a linkedlist
    A: O(n)
16: Complexity of the Code Snippet int a = 1 while (a < n) a = a * 2
    A: O(log2(n))
17: Name the Algorithm: social media suggests a list of friends that user may know
    A: Dijkstra's Algorithm
18: Inorder Tree Traversal: F, B, G, A, D, I, C, E, H
    (inorder: left, root, right)
    (preorder: root, left, right)
    (postorder: left, right, root)
    A: ABCDEFGHI
19: Binary Search: return binarySearch(arr, 1, mid+1, x)
    A: There is an error in line 8
20: Meaning of Space Complexity
    A: Memory required by an algorithm to run to complection
21: Tree Traversal 1: PostOrder -> DEBFGCA, PreOrder -> ABDECFG, whats inorder?
    A: DBEAFCG
22: Meaning of AVL Tree (difference between heights of left and right subtrees cannot be more than one for all nodes. )
    A: a BST with the property that each node has equal difference between left and right sub tree.
23: String Construction : 5 points to add and append, abhihibhihi
    A: 30 ( a + b + h + i + hi + bhihi)
24: Identify the Sorting Algorithm. find largest first, after 4 iterations, [2,4,5,7,8,1,3,6]
    A: The algorithm may be insertion sort but is not merge sort.
25: Uses of a Restricted Dequeue
    A: both as a queue and as a stack
26: How many comparison in a merge sort, (to merge two sorted arrays with size m and n)
    A: O(m + n)
27: What is big(O) annotation?
    A: is the upper bound growth rate of an algorithm
28. A public data member with the same name is provided in the base and its derived classes, which of the following is true?
    A: The program will compile, and this feature is called 'hiding' or 'shadowing'
29. Function<Integer, Integer> function = x -> x.sream().map(i -> i * 2)
    A: 6000
30: Java Streams output of class Weather
    A: weathers.stream().sorted((p1, p2) -> p1.getTemperature().compareTo(p2.getTemperature())).forEach(System.out::println);
31: Which of the following are true about the Error and Exception classes?
    A: Both classes extend Throwable
32: Java classes which statement is true?
    A: Static memeber classes can contain non-static methods.
33: Java Socket
    A:  String str = "kayak";
        boolean result = Stream.iterate(0, i -> i + 1)
            .limit(str.length())
            .anyMatch(i -> str.charAt(i) == str.charAt(str.length() - i - 1));
        System.out.println(result);
    A:  String str = "kayak";
        boolean result = IntStream.range(0, str.length()/2)
            .noneMatch(i -> str.charAt(i) != str.charAt(str.length() - i - 1));
        System.out.println(result);
    A:  String str = "kayak";
        boolean result = IntStream.range(0, str.length())
            .anyMatch(i -> str.charAt(i) == str.charAt(str.length() - i - 1));
        System.out.println(result);

